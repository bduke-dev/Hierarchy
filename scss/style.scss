//scss variables
$border-width: 2px;
$reverse: false;
$lineTime: 1s;
$slideTime: 1.5s;
$boxTime: 1s;
$lineColor: gray;

//scss mixin - like a reusable function
@mixin transition($time) {
    transition: $time ease-in-out;
	-webkit-transition: $time ease-in-out;
	-moz-transition: $time ease-in-out;
	-ms-transition: $time ease-in-out;
	-o-transition: $time ease-in-out;
}

.tree {
	//if set to true the whole thign is inverted, with the root at the bottom going up
    @if $reverse {
        transform: rotate(180deg);
        transform-origin: 50%;
    }
}
.tree ul {
	/*positioning*/
	
    position: relative;
    padding: 0;
    white-space: nowrap;
    margin: 0 auto;
    text-align: center;
	@include transition($slideTime);
}
.tree li {
	/*positinoing*/
	
    display: inline-block;
    vertical-align: top;
    text-align: center;
    list-style-type: none;
    position: relative;
    padding: 1em .5em $border-width .5em;
	
    &::before, &::after {
        /*top line between levels*/
        
        content: '';
        position: absolute;
        top: 0;
        right: 50%;
        border-top: $border-width solid $lineColor;
        width: 50%;
        height: 1em;
        @include transition($lineTime);
        opacity: 1;
        padding: 0 10px;
    }
    &::after {
        /*left children need the line shoved over*/
        
        right: auto;
        left: 50%;
        border-left: $border-width solid $lineColor;
    }
    &:only-child::after,
    &:only-child::before {
        /*only children don't need any lines to others*/
        
        display: none;
    }
    &:only-child {
        padding-top: 0;
    }
    &:first-child::before,
    &:last-child::after {
        /*first children don't need before, last children don't need after,
		  since they're at the ends*/
        
        border: 0 none;
    }
    &:last-child::before {
        /*sets color and radius*/
        
        border-right: $border-width solid $lineColor;
        border-radius: 0 5px 0 0;
    }
    &:first-child::after {
        /*sets radius*/
        
        border-radius: 5px 0 0 0;
    }
}
.tree ul ul::before {
	/*the lines going up to the previous level*/
	
    content: '';
    position: absolute;
    top: 0;
    left: 50%;
    border-left: $border-width solid $lineColor;
    width: 0;
    height: 1em;
    @include transition($lineTime);
    opacity: 1;
}
.show-child {
    /*checkboxes*/
    
    display: none;
}
.child {
    /*hidde stuff*/
    
    max-height: 0;
    max-width: 0;
    overflow: hidden;
    @include transition($boxTime);
    opacity: 0;
}
.show-child:not(:checked)~ ul {
    /*hidde stuff*/
    
    height: 0;
	
    &:before {
        /*hidde stuff*/
        
        opacity: 0;
    }
    &>li {
        &:before, &:after {
            /*hidde stuff*/
            
            opacity: 0;
        }
    }
}
.show-child:checked~ ul {
	padding: 1em 0 0 0;
	
	&> .child {
		/*unhide stuff*/
		
		max-height: 100vh;
		max-width: 100vw;
		
		/*curse you IE, every other browser allows overflow: initial; but you don't!*/
		
		overflow: visible;
		opacity: 1;
	}
}
.tree li label {
    /*look of bubbles*/
    
    border: $border-width solid $lineColor;
    padding: .5em .75em;
    display: inline-block;
    border-radius: 5px;
    color: black;
    //position: relative;
    top: $border-width;
    cursor: pointer;
    @if $reverse {
        transform: rotate(180deg);
    }
}